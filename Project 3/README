**We will be using a late pass on this assignment**

Project 3: Oscar Delgado and Colin Murphy 
Language: Java 
Environment: IntelliJ and Visual Studio
No special instructions, just run main

Assumptions/Comments:
-The instructions said casuals could only rent one car so we coded as is.( With our program this can be changed easily by editing carLimit in the respective classes)
-Ignore the class FakeStore, it was used for testing code
-Everyday we ask 5 random customers if they want to rent, and then because only some of them are able to rent, we get a range of 0-5 customers trying to enter the store any given day
-Our UML diagram was generated by IntelliJ, we assumed we could do this because "Any UML tool can be used to create the UML class diagram".
-We included both the png and the pdf version of our diagram, the png is better quality.

Description of program design:
You could consider our code as having three main categories: Customer, Car, and Store. For our customers we implemented the three types, and 
changed their rent behavior using a Strategy Pattern Implementation. Every time they perform rent they return two int values, one for number of 
cars wanted and the other for the number of nights. The number of cars is influenced by how many cars they are already renting, which implements 
the Regular behavior of renting cars for different days up to 3 cars. Then we have CustomerList which holds all 12 customers and FindCustomers
that grabs customers that both can rent, and only want as many cars as the store can provide, and then sends them into the store. 
For our cars we created the different types, and store all 24 cars in a CarList. We used the Decorator Design Pattern to implement the cost of 
different add ons for different types of cars. We made the AvailableCars class to keep track of what cars can be rented any given day. Every time
a car is rented we remove it from the AvailableCars list and add it to a rentList. 
For the store we have it so one customer enters at a time and is connected with one car at a time until they get all the cars they want. A customer
will never enter the store if they want more cars than are available. For each rental we create an instance of the class Rented, which notes
all the valuable information. We have an Announcer class that implents the Observer Patter. Everytime something happens, like a new instance of
Rented, it will take note and then write to the outFile. Then at the start of every day we reset what we need to using the newday function
in store. This all takes place 35 times by calling the Run method in the Simulation class.
